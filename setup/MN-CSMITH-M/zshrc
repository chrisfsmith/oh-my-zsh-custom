# User configuration
export EDITOR='subl -w'

export ST_ENV=local

export ST_GIT_SANDBOX=~/dev/smartthings
export COM_GIT_SANDBOX=~/dev/community
export GITLAB_SANDBOX=~/dev/gitlab


#
# Grails
#
source $ZSHSETUP/$HOSTNAME/grails


#
# NVM
#
export NVM_DIR="$HOME/.nvm"
[[ -s "$(brew --prefix nvm)/nvm.sh" ]] && source "$(brew --prefix nvm)/nvm.sh"


#
# Cassandra
#
export CASSANDRA_BIN=/usr/local/bin

#
# AWS
#
alias gimme='gimme-aws-creds'
alias gimme-cn='gimme-aws-creds --profile CN'

alias awsassume='export AWS_PROFILE=STPreprodPowerUser'
alias awsassume-acceptance='export AWS_PROFILE=STAcceptanceReadOnly'
alias awsassume-prod='export AWS_PROFILE=STProductionReadOnly'

alias awsassume-cn='export AWS_PROFILE=STPreprodCNPowerUser'
alias awsassume-cn-prod='export AWS_PROFILE=STProductionCNPowerUser'

#alias awsidentity='export AWS_PROFILE=st-identity'
#alias awsenv='source ~/aws_env.sh'

#function awsassume() {
#  aws sts assume-role --role-arn arn:aws:iam::344541377886:role/ident-smartthings_preprod-power_user --role-session-name "Pre-Prod" --profile "st-identity" > ~/assume-preprod-output.txt
#  export AWS_ACCESS_KEY_ID=`cat ~/assume-preprod-output.txt | jq -c '.Credentials.AccessKeyId' | tr -d '"' | tr -d ' '`
#  export AWS_SECRET_ACCESS_KEY=`cat ~/assume-preprod-output.txt | jq -c '.Credentials.SecretAccessKey' | tr -d '"' | tr -d ' '`
#  export AWS_SESSION_TOKEN=`cat ~/assume-preprod-output.txt | jq -c '.Credentials.SessionToken' | tr -d '"' | tr -d ' '`
#  rm ~/assume-preprod-output.txt
#}

#function awsassume_acceptance() {
#  aws sts assume-role --role-arn arn:aws:iam::817686556960:role/ident-smartthings_acceptance-read_only --role-session-name "Acceptance-Read-Only" --profile "st-identity" > ~/assume-acceptance-output.txt
#  export AWS_ACCESS_KEY_ID=`cat ~/assume-acceptance-output.txt | jq -c '.Credentials.AccessKeyId' | tr -d '"' | tr -d ' '`
#  export AWS_SECRET_ACCESS_KEY=`cat ~/assume-acceptance-output.txt | jq -c '.Credentials.SecretAccessKey' | tr -d '"' | tr -d ' '`
#  export AWS_SESSION_TOKEN=`cat ~/assume-acceptance-output.txt | jq -c '.Credentials.SessionToken' | tr -d '"' | tr -d ' '`
#  rm ~/assume-acceptance-output.txt
#}

#function awsassume_prod() {
#  aws sts assume-role --role-arn arn:aws:iam::747017778629:role/ident-smartthings_production-read_only --role-session-name "Prod" --profile "st-identity" > ~/assume-prod-output.txt
#  export AWS_ACCESS_KEY_ID=`cat ~/assume-prod-output.txt | jq -c '.Credentials.AccessKeyId' | tr -d '"' | tr -d ' '`
#  export AWS_SECRET_ACCESS_KEY=`cat ~/assume-prod-output.txt | jq -c '.Credentials.SecretAccessKey' | tr -d '"' | tr -d ' '`
#  export AWS_SESSION_TOKEN=`cat ~/assume-prod-output.txt | jq -c '.Credentials.SessionToken' | tr -d '"' | tr -d ' '`
#  rm ~/assume-prod-output.txt
#}

#function awsassume_cn() {
#  aws sts assume-role --role-arn arn:aws-cn:iam::787755417206:role/ident-smartthings_preprod_cn-power_user --role-session-name "Pre-Prod-Cn" --profile "st-identity-cn" > ~/assume-preprod-cn-output.txt
#  export AWS_ACCESS_KEY_ID=`cat ~/assume-preprod-cn-output.txt | jq -c '.Credentials.AccessKeyId' | tr -d '"' | tr -d ' '`
#  export AWS_SECRET_ACCESS_KEY=`cat ~/assume-preprod-cn-output.txt | jq -c '.Credentials.SecretAccessKey' | tr -d '"' | tr -d ' '`
#  export AWS_SESSION_TOKEN=`cat ~/assume-preprod-cn-output.txt | jq -c '.Credentials.SessionToken' | tr -d '"' | tr -d ' '`
#  rm ~/assume-preprod-cn-output.txt
#}

#function awsassume_prod_cn() {
#  aws sts assume-role --role-arn arn:aws-cn:iam::817867943085:role/ident-smartthings_production_cn-power_user --role-session-name "Prod-Cn" --profile "st-identity-cn" > ~/assume-prod-cn-output.txt
#  export AWS_ACCESS_KEY_ID=`cat ~/assume-prod-cn-output.txt | jq -c '.Credentials.AccessKeyId' | tr -d '"' | tr -d ' '`
#  export AWS_SECRET_ACCESS_KEY=`cat ~/assume-prod-cn-output.txt | jq -c '.Credentials.SecretAccessKey' | tr -d '"' | tr -d ' '`
#  export AWS_SESSION_TOKEN=`cat ~/assume-prod-cn-output.txt | jq -c '.Credentials.SessionToken' | tr -d '"' | tr -d ' '`
#  rm ~/assume-prod-cn-output.txt
#}

function lg {
  list_instances_osx --json | jq '[.[] | select(.name | contains("'$1'")) | {id: .id, name: .name, ip: .privateIp}]'
}

function lg-cn {
  list_instances_osx --region=cn-north-1 --json | jq '[.[] | select(.name | contains("'$1'")) | {id: .id, name: .name, ip: .privateIp}]'
}

function buildinfo_verbose() {
    if [ -n "$2" ]
    then
      query="[.[] | select(.serverGroupEnvironment | contains(\"$2\"))]"
    else
      query="."
    fi 
    local OUTPUT=$(curl -sX GET https://northstar.streleng.com/app/$1 \
      -H 'x-ec2-instance-document: <document>' \
      -H 'x-ec2-instance-signature: <signature>'
    )
    echo "$OUTPUT" | jq $query
}

function buildinfo() {
    buildinfo_verbose $* | jq '[.[] | {name: .serverGroupName, environment: .serverGroupEnvironment, version: .buildInfoVersion }]'
}

#awsenv
#awspreprod
awsassume

#
# Aliases
#
alias cdst='cd $ST_GIT_SANDBOX/'
alias cddm='cd $ST_GIT_SANDBOX/data-management'
alias cdcc='cd $ST_GIT_SANDBOX/client-connectivity'
alias cddc='cd $ST_GIT_SANDBOX/device-connectivity'
alias cdan='cd $ST_GIT_SANDBOX/provisioning/ansible'
alias cdtr='cd $ST_GIT_SANDBOX/ticker'

alias cdcom='cd $COM_GIT_SANDBOX'
alias cdpri='cd $COM_GIT_SANDBOX/SmartThingsPrivate'

alias cdmiranda='cd $GITLAB_SANDBOX/miranda'
alias cdreaver='cd $GITLAB_SANDBOX/reaver'
alias cdrule-proxy='cd $GITLAB_SANDBOX/rule-proxy'
alias cdserenity='cd $GITLAB_SANDBOX/serenity'

alias gw-br='./gradlew bootRun'
alias gw-c='./gradlew clean'
alias gw-ca='./gradlew clean assemble'
alias gw-cac='./gradlew clean assemble check'
alias gw-cacp='./gradlew clean assemble checkProjects'
alias gw-r='./gradlew run'
alias gw-rd='./gradlew run  --debug-jvm'

#
# Android Studio
#
export ANDROID_HOME=/Users/$USER/Library/Android/sdk
export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools

#
# PATH
#
export PATH=/usr/local/opt/cassandra@2.1/bin:~/bin:/usr/local/bin:$PATH:/usr/local/sbin

# fpath=($HOME/dev/personal/gradle-completion $fpath)

#
# Java
#
function java7() {
	export JAVA_HOME=`/usr/libexec/java_home -v 1.7`
	export JAVA_OPTS="-Djava.awt.headless=true -Xms1G -Xmx2G -XX:MaxPermSize=512m -XX:+UseConcMarkSweepGC"
}

function java8() {
	export JAVA_HOME=`/usr/libexec/java_home -v 1.8`
	export JAVA_OPTS="-Djava.awt.headless=true -Xms1G -Xmx2G -XX:+UseConcMarkSweepGC"
}

# java8

#
# iterm2 specific features
#
#source ~/.iterm2_shell_integration.zsh
#iterm2_print_user_vars() {
#  iterm2_set_user_var gitRepo $(basename `git rev-parse --show-toplevel 2> /dev/null` 2> /dev/null) || return
#}
